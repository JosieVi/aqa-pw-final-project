import { STATUS_CODES } from 'data/statusCodes';
import { generateCustomerData } from './generateCustomer.data';
import { COUNTRIES } from './countries.data';

export const positiveTestCasesForUpdate = [
  {
    name: 'Full valid data',
    newCustomerData: generateCustomerData(),
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'Empty notes',
    newCustomerData: generateCustomerData({ notes: '' }),
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'Email with post/prefix spaces',
    newCustomerData: { email: ' newSpecialEmail@fake.com ' },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: '1-char name',
    newCustomerData: { name: 'A' },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: '40-char name including one space',
    newCustomerData: { name: `${'A'.repeat(10)} ${'A'.repeat(29)}` },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'Name with post/prefix spaces',
    newCustomerData: { name: ' Evilla Roberts ' },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: '1-char city',
    newCustomerData: { city: 'A' },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: '20-char city including one space',
    newCustomerData: { name: `${'A'.repeat(5)} ${'A'.repeat(14)}` },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'City with post/prefix spaces',
    newCustomerData: { city: ' Stockholm ' },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: '1-char street',
    newCustomerData: { street: 'A' },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: '40-char street including one space',
    newCustomerData: { name: `${'A'.repeat(15)} ${'A'.repeat(24)}` },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'Street with post/prefix spaces',
    newCustomerData: { street: ' Mannerheim katu ' },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'House = 1',
    newCustomerData: { house: 1 },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'House = 999',
    newCustomerData: { house: 999 },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'Flat = 1',
    newCustomerData: { flat: 1 },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'Flat = 9999',
    newCustomerData: { flat: 9999 },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'Min valid phone',
    newCustomerData: { phone: '+1234567890' },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'Max length phone',
    newCustomerData: { phone: '+12345678909876543210' },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'Phone with post/prefix spaces',
    newCustomerData: { phone: ' +1234567890  ' },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: '250-char notes',
    newCustomerData: { notes: 'N'.repeat(250) },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'Notes with post/prefix spaces',
    newCustomerData: { notes: ' Some notes ' },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
  {
    name: 'Extra unknown field',
    newCustomerData: {
      ...generateCustomerData(),
      extraField: 'should be ignored',
    },
    expectedStatusCode: STATUS_CODES.OK,
    isSuccess: true,
    errorMessage: null,
  },
];

export const negativeTestCasesForUpdateWithoutToken = [
  {
    name: 'Missing auth token',
    newCustomerData: {},
    token: '',
    expectedStatusCode: STATUS_CODES.UNAUTHORIZED,
    isSuccess: false,
    errorMessage: 'Not authorized',
  },
  {
    name: 'Invalid auth token',
    newCustomerData: {},
    token: 'invalid_token',
    expectedStatusCode: STATUS_CODES.UNAUTHORIZED,
    isSuccess: false,
    errorMessage: 'Invalid access token',
  },
];

export const negativeTestCasesForUpdate = [
  {
    name: 'Empty email',
    newCustomerData: { email: '' },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Email without @',
    newCustomerData: { email: 'invalidemail.com' },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Empty name',
    newCustomerData: { name: '' },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Name too long (41 chars)',
    newCustomerData: { name: `${'A'.repeat(30)} ${'A'.repeat(10)}` },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Invalid country',
    newCustomerData: { country: 'Sweden' as COUNTRIES },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Empty city',
    newCustomerData: { city: '' },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'City contains numbers',
    newCustomerData: { city: 'City123' },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Empty street',
    newCustomerData: { street: '' },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Street too long (41 chars)',
    newCustomerData: { name: `${'A'.repeat(35)} ${'A'.repeat(5)}` },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'House is zero',
    newCustomerData: { house: 0 },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'House exceeds upper limit',
    newCustomerData: { house: 1000 },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Flat is zero',
    newCustomerData: { flat: 0 },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Flat exceeds upper limit',
    newCustomerData: { flat: 10000 },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Phone without plus sign',
    newCustomerData: { phone: '1234567890' },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Phone too long',
    newCustomerData: { phone: '+123456789012345678901' },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Notes contain < >',
    newCustomerData: { notes: 'This note contains <script>' },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Notes exceed max length (251 chars)',
    newCustomerData: { notes: 'A'.repeat(251) },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
  {
    name: 'Flat is a string',
    newCustomerData: {
      ...generateCustomerData(),
      flat: 'not-a-number' as unknown as number,
    },
    expectedStatusCode: STATUS_CODES.BAD_REQUEST,
    isSuccess: false,
    errorMessage: 'Incorrect request body',
  },
];
